<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Functional Programming on ChemDev.me</title>
    <link>https://chemdev.me/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on ChemDev.me</description>
    <image>
      <title>ChemDev.me</title>
      <url>https://chemdev.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chemdev.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Oct 2023 13:44:27 -0600</lastBuildDate><atom:link href="https://chemdev.me/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gleam: A Neat Type Safe FP Language!</title>
      <link>https://chemdev.me/posts/gleam_is_cool/</link>
      <pubDate>Sun, 29 Oct 2023 13:44:27 -0600</pubDate>
      
      <guid>https://chemdev.me/posts/gleam_is_cool/</guid>
      <description>Discovering Gleam: Compile Time Type Safety! I recently found this Hackernews post talking about Gleam, a FP language built on the Beam. It seems like Gleam is trying to be the performant, type-safety choice for backend systems.
In the past, I dabbled with Elixir (also on the Beam), and I really liked it! Once I understood the basics of Elixir, it felt like a very ergonomic and productive language.
Types But there is one thing I didn&amp;rsquo;t like about Elixir: the dynamic typing.</description>
    </item>
    
    <item>
      <title>An Introduction to Functional Thinking: Actions, Calculations, and Data</title>
      <link>https://chemdev.me/posts/intro_functional_thinking/</link>
      <pubDate>Sat, 12 Aug 2023 17:22:17 -0600</pubDate>
      
      <guid>https://chemdev.me/posts/intro_functional_thinking/</guid>
      <description>Background I&amp;rsquo;m Learning Functional Programming Lately, I&amp;rsquo;ve started to dip my toes into the fountain of functional programming, and it has been really interesting and awesome!
It feels like a breath of fresh air and more natural compared to typical OOP, and I want to share what I&amp;rsquo;ve learned with you!
Grokking Simplicity To fill in my knowledge gaps on functional programming, I&amp;rsquo;m reading an amazing book by Eric Normand called Grokking Simplicity.</description>
    </item>
    
  </channel>
</rss>
